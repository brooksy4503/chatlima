const http = require('http');

// Test different scenarios to identify the security vulnerability
async function testScenario(scenario, postData, headers = {}) {
  const hostname = 'localhost';
  const port = 3000;
  
  const options = {
    hostname: hostname,
    port: port,
    path: '/api/chat',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData),
      ...headers
    }
  };

  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`\n=== ${scenario} ===`);
        console.log('Status Code:', res.statusCode);
        console.log('Response Body:', data);
        
        if (res.statusCode === 200) {
          console.log('❌ VULNERABILITY: Request succeeded when it should have been blocked!');
        } else if (res.statusCode === 401) {
          console.log('✅ Expected: Authentication required');
        } else if (res.statusCode === 403) {
          console.log('✅ Expected: Premium model access blocked');
        } else if (res.statusCode === 402) {
          console.log('✅ Expected: Insufficient credits');
        } else {
          console.log(`⚠️  Unexpected status: ${res.statusCode}`);
        }
        
        resolve({ statusCode: res.statusCode, data: data });
      });
    });

    req.on('error', (err) => {
      console.error('Request Error:', err);
      reject(err);
    });

    req.write(postData);
    req.end();
  });
}

async function runSecurityTests() {
  console.log('=== Testing Chat API Security Vulnerabilities ===\n');
  
  // Test 1: Anonymous user with premium model (should be blocked)
  const test1Data = JSON.stringify({
    messages: [
      {
        id: "user-msg-1",
        role: "user",
        content: "Hello, can you help me with a simple question?",
        parts: [{ type: "text", text: "Hello, can you help me with a simple question?" }]
      }
    ],
    selectedModel: "openrouter/openai/chatgpt-4o-latest",
    webSearch: { enabled: false, contextSize: "medium" },
    apiKeys: {},
    attachments: [],
    mcpServers: []
  });
  
  await testScenario("Test 1: Anonymous user with premium model", test1Data);
  
  // Test 2: User with own API key (should work - legitimate bypass)
  const test2Data = JSON.stringify({
    messages: [
      {
        id: "user-msg-1",
        role: "user",
        content: "Hello, can you help me with a simple question?",
        parts: [{ type: "text", text: "Hello, can you help me with a simple question?" }]
      }
    ],
    selectedModel: "openrouter/openai/chatgpt-4o-latest",
    webSearch: { enabled: false, contextSize: "medium" },
    apiKeys: { "OPENROUTER_API_KEY": "test-key" },
    attachments: [],
    mcpServers: []
  });
  
  await testScenario("Test 2: User with own API key", test2Data);
  
  // Test 3: Anonymous user with free model (should work)
  const test3Data = JSON.stringify({
    messages: [
      {
        id: "user-msg-1",
        role: "user",
        content: "Hello, can you help me with a simple question?",
        parts: [{ type: "text", text: "Hello, can you help me with a simple question?" }]
      }
    ],
    selectedModel: "openrouter/openai/gpt-4o-mini",
    webSearch: { enabled: false, contextSize: "medium" },
    apiKeys: {},
    attachments: [],
    mcpServers: []
  });
  
  await testScenario("Test 3: Anonymous user with free model", test3Data);
  
  console.log('\n=== Security Test Summary ===');
  console.log('If Test 1 returns 200, there is a security vulnerability!');
  console.log('If Test 2 returns 200, that is expected (legitimate bypass)');
  console.log('If Test 3 returns 200, that is expected (free model)');
}

runSecurityTests().catch(console.error);
